
<div class="container">
    <div class="left-section">
        <div class="input-group">
            <label for="title">Ti√™u ƒë√™ÃÄ:</label>
            <input type="text" id="title" >

        </div>
        <div class="input-group">
            <label for="time">Th·ªùi gian:</label>
            <input type="text" id="time" >

        </div>
        <div class="input-group">
            <label for="term">M√¥n h·ªçc:</label>
            <input type="text" id="term" >

        </div>
        <div class="input-group">
            <label for="subject">M√¥ taÃâ:</label>
            <input type="text" id="subject">

        </div>
        <div class="button-group">
            <button class="btn save">L∆∞u</button>
            <button class="btn cancel">H·ªßy</button>
        </div>

    </div>
    <div class="right-section">
        {{#each questions}}
        <div class="question-card" id="{{id}}">
            <div class="question-header">
                {{title}}
            </div>
            <div class="question-info">
                <p>{{content}}</p>
                <!-- Selected criteria will be displayed here -->
                <div id="question-criteria-{{@index}}" class="selected-criteria"></div>
                {{!-- select criteria --}}
                <li class="criterias">
                    <a href="javascript:void(0)" class="cribtn">Criteria</a>
                    <div class="criterias-content">
                    {{#each criteria}}
                        <a href="javascript:void(0)" class="criterias-element" id="question-criteria-{{@../index}}" data-criteria="{{this}}">{{this}}</a>
                    {{/each}}
                    </div>
                </li>
                {{!-- end select criteria --}}
            </div>
            <div class="question-actions">
                <button class="btn-up" id="question-card-{{@index}}">&#9650;</button>
                <button class="btn-down" id="question-card-{{@index}}">&#9660;</button>
                <button class="btn-delete" id="question-card-{{@index}}">&#128465;</button>
            </div>
            
        </div>
        {{/each}}
        <button class="question-add">+</button>

    </div>
    
</div>
<!-- Container for loading modal content dynamically -->
<div id="modal-container"></div>


{{!-- event listener for select criteria --}}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const criteriaElements = document.querySelectorAll(".criterias-element");

    criteriaElements.forEach(element => {
        element.addEventListener("click", function() {
            const criteria = this.getAttribute("data-criteria");
            const questionId = this.getAttribute("id");
            addCriteria(criteria, questionId);
        });
    });

    function addCriteria(criteria, questionId) {
        const selectedCriteriaContainer = document.getElementById(questionId);
        selectedCriteriaContainer.innerHTML = "";

        const criteriaItem = document.createElement("span");
        criteriaItem.className = "selected-criteria-item";
        criteriaItem.textContent = criteria;
        criteriaItem.setAttribute("data-id", questionId);

        //criteriaItem.addEventListener("click", function() {
        //    this.remove();
        //});

        selectedCriteriaContainer.appendChild(criteriaItem);
    }
    //Script for handling up, down, and delete button actions
    const upButtons = document.querySelectorAll('.btn-up');
    const downButtons = document.querySelectorAll('.btn-down');
    const deleteButtons = document.querySelectorAll('.btn-delete');

    upButtons.forEach(button => {
        button.addEventListener('click', function() {
            const questionCard = this.closest('.question-card');
            const previousCard = questionCard.previousElementSibling;
            if (previousCard && previousCard.classList.contains('question-card')) {
                questionCard.parentNode.insertBefore(questionCard, previousCard);
            }
        });
    });

    downButtons.forEach(button => {
        button.addEventListener('click', function() {
            const questionCard = this.closest('.question-card');
            const nextCard = questionCard.nextElementSibling;
            if (nextCard && nextCard.classList.contains('question-card')) {
                questionCard.parentNode.insertBefore(nextCard, questionCard);
            }
        });
    });

    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const questionCard = this.closest('.question-card');
            questionCard.remove();
        });
    });
});
</script>


<script>
document.addEventListener("DOMContentLoaded", function() {
    // Function to load modal content dynamically
    function loadModalContent() {
        fetch('popup/folderpopup.hbs')
            .then(response => response.text())
            .then(data => {
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = data;

                const modal = document.getElementById('question-folder-modal');
                const closeModal = modal.querySelector('.close-button');
                closeModal.addEventListener('click', function() {
                    modal.style.display = 'none';
                    removeModalContent();
                });

                fetchFolder();
                modal.style.display = 'block';
            });
    }

    // Function to remove modal content
    function removeModalContent() {
        const modalContainer = document.getElementById('modal-container');
        modalContainer.innerHTML = '';
    }

// Function to fetch folders from the server
    function fetchFolder() {
        fetch('popup/pesudo_api.json')  // Replace with your actual endpoint
            .then(response => response.json())
            .then(data => populateFolders(data))
            .catch(error => console.error('Error fetching folders:', error));
    }

    // Function to populate folders in the modal
        function populateFolders(folders) {
            const folderList = document.getElementById('folderList');
            folderList.innerHTML = ''; // Clear any existing content

            folders.forEach((folder, index) => {
                const folderItem = document.createElement('div');
                folderItem.className = 'folder';
                folderItem.setAttribute('data-folder-index', index);
                folderItem.innerHTML = `
                    <div class="folder-icon"></div>
                    <div class="folder-info">
                    <div class="folder-name">${folder.name}</div>
                    <div class="folder-details">
                        ‚â° ${folder.questionCount} c√¢u h·ªèi üìö ${folder.subject}
                    </div>
                    </div>
                `;
                folderItem.addEventListener('click', function() {
                    // Handle folder click event to load questions
                    loadQuestionsFromFolder(folder);
                    const modal = document.getElementById('question-folder-modal');
                    modal.style.display = 'none';
                    removeModalContent();
                });
                folderList.appendChild(folderItem);
            });
        }

    // Function to load questions from a selected folder (example placeholder)
    function loadQuestionsFromFolder(folder) {

        // Implement logic to load and display questions from the selected folder
        console.log('Loading questions from folder:', folder);
        fetch('popup/questionpopup.hbs')
            .then(response => response.text())
            .then(data => {
                const modalContainer = document.getElementById('modal-container');
                modalContainer.innerHTML = data;
                const modal = document.getElementById('question-choice-modal');
                const modal_name =modal.querySelector('.modal-title');
                modal_name.textContent=folder.name;
                const closeModal = modal.querySelector('.close-button');
                closeModal.addEventListener('click', function() {
                    modal.style.display = 'none';
                    removeModalContent();
                });
                const backModal = modal.querySelector('.back-button');
                backModal.addEventListener('click', function() {
                    modal.style.display = 'none';
                    removeModalContent();
                    loadModalContent();
                })
                fetchQuestions();
                modal.style.display = 'block';
            });
    }
    
    // Function to fetch question in a specific folder
    function fetchQuestions() {
        fetch('popup/pesudo_api2.json')  // Replace with your actual endpoint
            .then(response => response.json())
            .then(data => populateQuestions(data.questions))
            .catch(error => console.error('Error fetching questions:', error));
    }

    // Function to add question from fetched questions
    function populateQuestions(data) {
        const questionList = document.getElementById('questionList');
        questionList.innerHTML = ''; // Clear any existing content
        data.forEach((question, index) => {
            const questionItem = document.createElement('div');
            questionItem.className = 'question-container';
            questionItem.setAttribute('data-question-index', index);
            questionItem.innerHTML = `
                <div class="quesiton-icon"></div>
                <div class="quesiton-info">
                    <div class="quesiton-name">${question.title}</div>
                    <div class="question-content">
                    <span class="content-short" data-max-length="100">${question.content}</span>
                    <span class="content-full">${question.content}</span>
                    </div>
                    <div class="criteria-count">Number of criteria: ${question.criteriaCount}</div>
                </div>
                <button class="select-button">Select</button>
            `;

            // Select the button within the question item
            const selectBtn = questionItem.querySelector('.select-button');

            // Add event listener to the select button
            selectBtn.addEventListener('click', function() {
                addQuestionCard(question);
                removeModalContent();
            });
            questionList.appendChild(questionItem);
        });


    }

    // Function to add a question card
function addQuestionCard(question) {
    console.log('question choice:', question);
    const rightSection = document.querySelector('.right-section');
    const questionCard = document.createElement('div');
    questionCard.className = 'question-card';
    questionCard.id =question.id;
    questionCard.innerHTML = `
        <div class="question-header">
            ${question.title}
        </div>
        <div class="question-info">
            <p>${question.content}</p>
            <div class="selected-criteria"></div>
            <li class="criterias">
                <a href="javascript:void(0)" class="cribtn">Criteria</a>
                <div class="criterias-content"></div>
            </li>
        </div>
        <div class="question-actions">
            <button class="btn-up">&#9650;</button>
            <button class="btn-down">&#9660;</button>
            <button class="btn-delete">&#128465;</button>
        </div>
    `;
    // Insert the question card into the right section
    rightSection.insertBefore(questionCard, rightSection.querySelector('.question-add'));

    // Generate and insert criteria options
    const criteriaContent = questionCard.querySelector('.criterias-content');
    const selectedCriteria = questionCard.querySelector('.selected-criteria');

    question.criteria.forEach((criterion, index) => {
        const criteriaElement = document.createElement('a');
        criteriaElement.href = 'javascript:void(0)';
        criteriaElement.className = 'criterias-element';
        criteriaElement.id = `question-criteria-${index}`;
        criteriaElement.dataset.criteria = criterion;
        criteriaElement.textContent = criterion;
        criteriaContent.appendChild(criteriaElement);

        // Add event listener to handle criteria selection
        criteriaElement.addEventListener('click', function() {
            selectedCriteria.innerHTML = '';
            const criteriaItem = document.createElement('span');
            criteriaItem.className = 'selected-criteria-item';
            criteriaItem.textContent = criterion;
            criteriaItem.setAttribute('data-id', index); // Assuming index as the unique identifier
            selectedCriteria.appendChild(criteriaItem);
        });
    });

    // Add event listeners for the new card's buttons
    const upButton = questionCard.querySelector('.btn-up');
    const downButton = questionCard.querySelector('.btn-down');
    const deleteButton = questionCard.querySelector('.btn-delete');

    upButton.addEventListener('click', function() {
        const previousCard = questionCard.previousElementSibling;
        if (previousCard && previousCard.classList.contains('question-card')) {
            questionCard.parentNode.insertBefore(questionCard, previousCard);
        }
    });

    downButton.addEventListener('click', function() {
        const nextCard = questionCard.nextElementSibling;
        if (nextCard && nextCard.classList.contains('question-card')) {
            questionCard.parentNode.insertBefore(nextCard, questionCard);
        }
    });

    deleteButton.addEventListener('click', function() {
        questionCard.remove();
    });
}


    // Add new question button click event
    const addButton = document.querySelector('.question-add');
    addButton.addEventListener('click', function() {
        loadModalContent();
    });
});
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const saveButton = document.querySelector('.btn.save');
        const cancelButton = document.querySelector('.btn.cancel');

        saveButton.addEventListener('click', () => {
            // Extract values from input fields
            const title = document.getElementById('title').value;
            const time = document.getElementById('time').value;
            const term = document.getElementById('term').value;
            const subject = document.getElementById('subject').value;

            // Extract questions and their criteria
            const questions = [];
            document.querySelectorAll('.question-card').forEach(card => {
                const questionId = card.id;
                const criteriaElements = card.querySelectorAll('.selected-criteria span');
                const criteria = Array.from(criteriaElements).map(el => el.textContent);
                
                questions.push({ id: questionId, criteria });
            });

            // Example payload to send to the server
            const payload = {
                title,
                time,
                term,
                subject,
                questions
            };

            console.log('Payload:', payload);

            // Make a POST request to the server (uncomment and adjust the URL as needed)
            // fetch('/api/your-endpoint', {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(payload)
            // })
            // .then(response => response.json())
            // .then(data => console.log('Success:', data))
            // .catch(error => console.error('Error:', error));
        });

        cancelButton.addEventListener('click', () => {
            // Clear all input fields
            document.getElementById('title').value = '';
            document.getElementById('time').value = '';
            document.getElementById('term').value = '';
            document.getElementById('subject').value = '';

            // Optionally, reset criteria selections if needed
            document.querySelectorAll('.selected-criteria').forEach(criteriaDiv => {
                criteriaDiv.innerHTML = '';
            });
        });
    });
</script>
